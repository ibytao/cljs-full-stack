{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name figwheel.client.utils, :imports {Deferred goog.async.Deferred, StringBuffer goog.string.StringBuffer}, :requires {gstring goog.string, goog.userAgent.product goog.userAgent.product, Deferred goog.async.Deferred, goog.string goog.string, cljs.pprint cljs.pprint, StringBuffer goog.string.StringBuffer, string clojure.string, product goog.userAgent.product, clojure.string clojure.string, cljs.reader cljs.reader}, :uses {pprint cljs.pprint, read-string cljs.reader}, :defs {mapConcatD {:protocol-inline nil, :meta {:file "/Users/Buck/Sites/cljs-simple/resources/public/javascripts/cljs-dev/figwheel/client/utils.cljs", :line 89, :column 7, :end-line 89, :end-column 17, :arglists (quote ([deferred f coll])), :doc "maps an async action across a collection and chains the results\n  onto a deferred"}, :name figwheel.client.utils/mapConcatD, :variadic false, :file "resources/public/javascripts/cljs-dev/figwheel/client/utils.cljs", :end-column 17, :method-params ([deferred f coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 89, :end-line 89, :max-fixed-arity 3, :fn-var true, :arglists (quote ([deferred f coll])), :doc "maps an async action across a collection and chains the results\n  onto a deferred"}, base-url-path {:protocol-inline nil, :meta {:file "/Users/Buck/Sites/cljs-simple/resources/public/javascripts/cljs-dev/figwheel/client/utils.cljs", :line 27, :column 7, :end-line 27, :end-column 20, :arglists (quote ([]))}, :name figwheel.client.utils/base-url-path, :variadic false, :file "resources/public/javascripts/cljs-dev/figwheel/client/utils.cljs", :end-column 20, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, log {:protocol-inline nil, :meta {:file "/Users/Buck/Sites/cljs-simple/resources/public/javascripts/cljs-dev/figwheel/client/utils.cljs", :line 55, :column 7, :end-line 55, :end-column 10, :arglists (quote ([x] [level arg])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([x] [level arg]), :arglists ([x] [level arg]), :arglists-meta (nil nil)}}, :name figwheel.client.utils/log, :variadic false, :file "resources/public/javascripts/cljs-dev/figwheel/client/utils.cljs", :end-column 10, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([x] [level arg]), :arglists ([x] [level arg]), :arglists-meta (nil nil)}, :method-params ([x] [level arg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 55, :end-line 55, :max-fixed-arity 2, :fn-var true, :arglists ([x] [level arg])}, create-custom-event {:protocol-inline nil, :meta {:file "/Users/Buck/Sites/cljs-simple/resources/public/javascripts/cljs-dev/figwheel/client/utils.cljs", :line 30, :column 7, :end-line 30, :end-column 26, :arglists (quote ([event-name data]))}, :name figwheel.client.utils/create-custom-event, :variadic false, :file "resources/public/javascripts/cljs-dev/figwheel/client/utils.cljs", :end-column 26, :method-params ([event-name data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 2, :fn-var true, :arglists (quote ([event-name data]))}, worker-env? {:protocol-inline nil, :meta {:file "/Users/Buck/Sites/cljs-simple/resources/public/javascripts/cljs-dev/figwheel/client/utils.cljs", :line 19, :column 7, :end-line 19, :end-column 18, :arglists (quote ([]))}, :name figwheel.client.utils/worker-env?, :variadic false, :file "resources/public/javascripts/cljs-dev/figwheel/client/utils.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, host-env? {:protocol-inline nil, :meta {:file "/Users/Buck/Sites/cljs-simple/resources/public/javascripts/cljs-dev/figwheel/client/utils.cljs", :line 23, :column 7, :end-line 23, :end-column 16, :arglists (quote ([]))}, :name figwheel.client.utils/host-env?, :variadic false, :file "resources/public/javascripts/cljs-dev/figwheel/client/utils.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, persistent-config-set! {:protocol-inline nil, :meta {:file "/Users/Buck/Sites/cljs-simple/resources/public/javascripts/cljs-dev/figwheel/client/utils.cljs", :line 117, :column 7, :end-line 117, :end-column 29, :arglists (quote ([ky v])), :doc "Set a local value on a key that in a browser will persist even when \nthe browser gets reloaded."}, :name figwheel.client.utils/persistent-config-set!, :variadic false, :file "resources/public/javascripts/cljs-dev/figwheel/client/utils.cljs", :end-column 29, :method-params ([ky v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 117, :end-line 117, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ky v])), :doc "Set a local value on a key that in a browser will persist even when \nthe browser gets reloaded."}, node-env? {:protocol-inline nil, :meta {:file "/Users/Buck/Sites/cljs-simple/resources/public/javascripts/cljs-dev/figwheel/client/utils.cljs", :line 17, :column 7, :end-line 17, :end-column 16, :arglists (quote ([]))}, :name figwheel.client.utils/node-env?, :variadic false, :file "resources/public/javascripts/cljs-dev/figwheel/client/utils.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, html-env? {:protocol-inline nil, :meta {:file "/Users/Buck/Sites/cljs-simple/resources/public/javascripts/cljs-dev/figwheel/client/utils.cljs", :line 15, :column 7, :end-line 15, :end-column 16, :arglists (quote ([]))}, :name figwheel.client.utils/html-env?, :variadic false, :file "resources/public/javascripts/cljs-dev/figwheel/client/utils.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, liftContD {:protocol-inline nil, :meta {:file "/Users/Buck/Sites/cljs-simple/resources/public/javascripts/cljs-dev/figwheel/client/utils.cljs", :line 79, :column 7, :end-line 79, :end-column 16, :arglists (quote ([deferred f])), :doc "chains an async action on to a deferred\n  Must provide a goog.async.Deferred and action function that\n  takes an initial value and a continuation fn to call with the result"}, :name figwheel.client.utils/liftContD, :variadic false, :file "resources/public/javascripts/cljs-dev/figwheel/client/utils.cljs", :end-column 16, :method-params ([deferred f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 79, :end-line 79, :max-fixed-arity 2, :fn-var true, :arglists (quote ([deferred f])), :doc "chains an async action on to a deferred\n  Must provide a goog.async.Deferred and action function that\n  takes an initial value and a continuation fn to call with the result"}, *print-debug* {:name figwheel.client.utils/*print-debug*, :file "resources/public/javascripts/cljs-dev/figwheel/client/utils.cljs", :line 13, :column 1, :end-line 13, :end-column 29, :dynamic true, :meta {:file "/Users/Buck/Sites/cljs-simple/resources/public/javascripts/cljs-dev/figwheel/client/utils.cljs", :line 13, :column 16, :end-line 13, :end-column 29, :dynamic true}}, pprint-to-string {:protocol-inline nil, :meta {:file "/Users/Buck/Sites/cljs-simple/resources/public/javascripts/cljs-dev/figwheel/client/utils.cljs", :line 70, :column 7, :end-line 70, :end-column 23, :arglists (quote ([x]))}, :name figwheel.client.utils/pprint-to-string, :variadic false, :file "resources/public/javascripts/cljs-dev/figwheel/client/utils.cljs", :end-column 23, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 70, :end-line 70, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, local-persistent-config {:name figwheel.client.utils/local-persistent-config, :file "resources/public/javascripts/cljs-dev/figwheel/client/utils.cljs", :line 107, :column 1, :end-line 107, :end-column 33, :meta {:file "/Users/Buck/Sites/cljs-simple/resources/public/javascripts/cljs-dev/figwheel/client/utils.cljs", :line 107, :column 10, :end-line 107, :end-column 33}}, dispatch-custom-event {:protocol-inline nil, :meta {:file "/Users/Buck/Sites/cljs-simple/resources/public/javascripts/cljs-dev/figwheel/client/utils.cljs", :line 42, :column 7, :end-line 42, :end-column 28, :arglists (quote ([event-name data]))}, :name figwheel.client.utils/dispatch-custom-event, :variadic false, :file "resources/public/javascripts/cljs-dev/figwheel/client/utils.cljs", :end-column 28, :method-params ([event-name data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 42, :end-line 42, :max-fixed-arity 2, :fn-var true, :arglists (quote ([event-name data]))}, debug-prn {:protocol-inline nil, :meta {:file "/Users/Buck/Sites/cljs-simple/resources/public/javascripts/cljs-dev/figwheel/client/utils.cljs", :line 47, :column 7, :end-line 47, :end-column 16, :arglists (quote ([o]))}, :name figwheel.client.utils/debug-prn, :variadic false, :file "resources/public/javascripts/cljs-dev/figwheel/client/utils.cljs", :end-column 16, :method-params ([o]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 1, :fn-var true, :arglists (quote ([o]))}, persistent-config-get {:protocol-inline nil, :meta {:file "/Users/Buck/Sites/cljs-simple/resources/public/javascripts/cljs-dev/figwheel/client/utils.cljs", :line 123, :column 7, :end-line 123, :end-column 28, :arglists (quote ([ky not-found] [ky])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([ky not-found] [ky]), :arglists ([ky not-found] [ky]), :arglists-meta (nil nil)}}, :name figwheel.client.utils/persistent-config-get, :variadic false, :file "resources/public/javascripts/cljs-dev/figwheel/client/utils.cljs", :end-column 28, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([ky not-found] [ky]), :arglists ([ky not-found] [ky]), :arglists-meta (nil nil)}, :method-params ([ky not-found] [ky]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 123, :end-line 123, :max-fixed-arity 2, :fn-var true, :arglists ([ky not-found] [ky])}, eval-helper {:protocol-inline nil, :meta {:file "/Users/Buck/Sites/cljs-simple/resources/public/javascripts/cljs-dev/figwheel/client/utils.cljs", :line 65, :column 7, :end-line 65, :end-column 18, :arglists (quote ([code {:keys [eval-fn], :as opts}]))}, :name figwheel.client.utils/eval-helper, :variadic false, :file "resources/public/javascripts/cljs-dev/figwheel/client/utils.cljs", :end-column 18, :method-params ([code p__31679]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 65, :end-line 65, :max-fixed-arity 2, :fn-var true, :arglists (quote ([code {:keys [eval-fn], :as opts}]))}}, :require-macros {cljs.pprint cljs.pprint}, :cljs.analyzer/constants {:seen #{:else :sync-local-storage :warn :debug :node :info :error :eval-fn :worker :html}, :order [:node :html :worker :info :warn :debug :error :eval-fn :sync-local-storage :else]}, :doc nil}