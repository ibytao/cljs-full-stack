{:rename-macros {}, :renames {}, :use-macros {go cljs.core.async.macros, go-loop cljs.core.async.macros}, :excludes #{}, :name cljs-simple.core, :imports nil, :requires {cljs.core.async cljs.core.async, reagent reagent.core, reagent.core reagent.core}, :uses {timeout cljs.core.async, <! cljs.core.async, close! cljs.core.async, chan cljs.core.async, >! cljs.core.async, put! cljs.core.async}, :defs {data {:name cljs-simple.core/data, :file "src/cljs/cljs_simple/core.cljs", :line 6, :column 1, :end-line 6, :end-column 10, :meta {:file "/Users/Buck/Sites/cljs-simple/src/cljs/cljs_simple/core.cljs", :line 6, :column 6, :end-line 6, :end-column 10}}, app {:protocol-inline nil, :meta {:file "/Users/Buck/Sites/cljs-simple/src/cljs/cljs_simple/core.cljs", :line 8, :column 7, :end-line 8, :end-column 10, :arglists (quote ([]))}, :name cljs-simple.core/app, :variadic false, :file "src/cljs/cljs_simple/core.cljs", :end-column 10, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {cljs.core.async.macros cljs.core.async.macros, reagent reagent.core, reagent.core reagent.core}, :cljs.analyzer/constants {:seen #{:div :class :message}, :order [:message :div :class]}, :doc nil}